# PLATINUM SOURCES: Docker Compose, Kubernetes
# CONTINUAL LEARNING: Service dependency learning, resource optimization

version: '3.8'

# Custom networks for service isolation
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: false
  database:
    driver: bridge
    internal: true

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  logs:
    driver: local

services:
  # Main trading engine
  trading-engine:
    build:
      context: .
      target: builder
    container_name: aineon-trading-engine
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://aineon:password@postgres:5432/aineon_dev
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=debug
    networks:
      - backend
      - frontend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs:/app/logs:rw
      - /app/node_modules
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # AI Processing Service
  ai-processor:
    build:
      context: .
      target: builder
      args:
        - SERVICE=ai
    container_name: aineon-ai-processor
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - TRADING_ENGINE_URL=http://trading-engine:3000
      - DATABASE_URL=postgresql://aineon:password@postgres:5432/aineon_dev
    networks:
      - backend
    depends_on:
      - trading-engine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/ai/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # API Gateway
  api-gateway:
    build:
      context: .
      target: builder
      args:
        - SERVICE=gateway
    container_name: aineon-api-gateway
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - TRADING_ENGINE_URL=http://trading-engine:3000
      - AI_PROCESSOR_URL=http://ai-processor:3001
    networks:
      - frontend
      - backend
    depends_on:
      - trading-engine
      - ai-processor
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/gateway/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aineon-postgres
    environment:
      - POSTGRES_DB=aineon_dev
      - POSTGRES_USER=aineon
      - POSTGRES_PASSWORD=password
    networks:
      - database
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aineon -d aineon_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aineon-redis
    command: redis-server --appendonly yes --requirepass password
    networks:
      - database
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: aineon-prometheus
    ports:
      - "9090:9090"
    networks:
      - backend
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  grafana:
    image: grafana/grafana:latest
    container_name: aineon-grafana
    ports:
      - "3002:3000"
    networks:
      - backend
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

# Development-specific services
  dev-watcher:
    build:
      context: .
      target: builder
    container_name: aineon-dev-watcher
    command: npm run dev
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - backend
    environment:
      - NODE_ENV=development
    develop:
      watch:
        - action: sync
          path: .
          target: /app
        - action: rebuild
          path: package.json
